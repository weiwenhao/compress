import syscall
import os
import fmt
import path
import compress.archive_temp

i32 ARCHIVE_EOF = 1
i32 ARCHIVE_OK = 0

i32 ARCHIV_RETRY = -10
i32 ARCHIVE_WARN = -20

i32 ARCHIVE_FAILED = -25
i32 ARCHIVE_FATAL = -30

i32 ARCHIVE_EXTRACT_PERM = 0x0002
i32 ARCHIVE_EXTRACT_TIME = 0x0004
i32 ARCHIVE_EXTRACT_NO_OVERWRITE = 0x0008
i32 ARCHIVE_EXTRACT_UNLINK = 0x0010
i32 ARCHIVE_EXTRACT_ACL = 0x0020
i32 ARCHIVE_EXTRACT_FFLAGS = 0x0040

bool verbose = false


/**
 * @sources 是具体的文件夹或者目录名称，不支持按通配符号，如 * 或者 . 来匹配所有文件
 * @workdir 表示具体的工作目录, 相关 sources 都是在 workdir 中被找到的
 */
fn encode(string workdir, string tgz_path, [string] sources) {
    if workdir.len() == 0 {
        throw 'workdir is empty'
    }

    if tgz_path.len() == 0 {
        throw 'tgz_path is empty'
    }

    if sources.len() == 0 {
        throw 'sources is empty'
    }

    // string old = syscall.getcwd()
    // syscall.chdir(workdir)

    // 初始化 archive
    var a = archive_write_new()

    // 添加 gzip 方式压缩
    archive_write_add_filter_gzip(a)

    // 归档格式为 ustar 格式
    archive_write_set_format_ustar(a)

    // 写入目标文件
    archive_write_open_filename(a, tgz_path.ref())

    var buf = vec_new<u8>(16384, 0)

    for source in sources {
        var disk = archive_read_disk_new()

        var full_path = path.join(workdir, source)

        i32 r = archive_read_disk_open(disk, full_path.ref())
        if r != 0 {
            throw fmt.sprintf('read path %v failed', source)
        }

        for true {
            var entry = archive_entry_new()

            r = archive_read_next_header2(disk, entry)

            if r == ARCHIVE_EOF {
                break
            }

            if r != ARCHIVE_OK {
                throw libc_string_new(archive_error_string(disk))
            }

            archive_read_disk_descend(disk)

            var pathname =  libc_string_new(archive_entry_pathname(entry))

            // custom path name 从 path 中去掉 workdir!
            var custom = libc_string_replace(pathname, workdir + '/', '')
            archive_entry_set_pathname(entry, custom.ref())

            // debug
            if verbose {
                fmt.printf('a %v\n', libc_string_new(archive_entry_pathname(entry)))
            }

            r = archive_write_header(a, entry)

            // ignore error
            // if r < ARCHIVE_OK {
            //    throw libc_string_new(archive_error_string(a))
            //}

            if r == ARCHIVE_FATAL {
                throw libc_string_new(archive_error_string(a))
            }

            // success
            if r > ARCHIVE_FAILED {
                cptr raw = archive_entry_sourcepath(entry)

                // 目录也可以被打开，但是不能进行 read
                var fd = syscall.open(libc_string_new(raw), syscall.O_RDONLY, 0666)
                var len = syscall.read(fd, buf.ref(), buf.len()) catch err {}
                for len > 0 {
                     archive_write_data(a, buf.ref(), len)
                     len = syscall.read(fd, buf.ref(), buf.len())
                }
                syscall.close(fd)
            }

            archive_entry_free(entry)
        }

        // 当前 read 已经处理完成
        archive_read_close(disk)
        archive_read_free(disk)
    }
    // 全局 write 写入完成
    archive_write_close(a)
    archive_write_free(a)

    // 工作目录复原(defer 确实是很好用的一个功能)
    // syscall.chdir(old)
}


// 在指定目录将 tgz path 进行解压
fn decode(string workdir, string tgz_path) {
    if tgz_path.len() == 0 {
        throw 'tgz_path is empty'
    }

    archive_t a = archive_read_new()
    archive_t ext = archive_write_disk_new()

    archive_write_disk_set_options(ext, ARCHIVE_EXTRACT_TIME|ARCHIVE_EXTRACT_PERM|ARCHIVE_EXTRACT_ACL|ARCHIVE_EXTRACT_FFLAGS)

    // 添加 gzip 方式解压
    archive_read_support_filter_gzip(a)
    // 添加 tar 格式解压
    archive_read_support_format_tar(a)

    var r = archive_read_open_filename(a, tgz_path.ref(), 10240)
    if r > 0 {
        throw libc_string_new(archive_error_string(a))
    }

    archive_entry_t entry = 0

    for true {
        r = archive_read_next_header(a, &entry)
        if r == ARCHIVE_EOF {
            break
        }

        if r != ARCHIVE_OK {
            throw libc_string_new(archive_error_string(a))
        }

        var old = libc_string_new(archive_entry_pathname(entry))

        // 链接 workdir
        var custom = path.join(workdir, old)
        archive_entry_set_pathname(entry, custom.ref())

        if verbose {
            fmt.printf('x %v\n', libc_string_new(archive_entry_pathname(entry)))
        }

        r = archive_write_header(ext, entry)
        if r == ARCHIVE_OK {
            copy_data(a, ext)
        }
    }

    archive_read_close(a)
    archive_read_free(a)

    archive_write_close(ext)
    archive_write_free(ext)
}

fn copy_data(archive_t ar, archive_t aw):i32 {
    cptr buf = 0
    uint size = 0
    i64 offset = 0
    i32 r = 0

    for true {
        r = archive_read_data_block(ar, &buf, &size, &offset)
        if r == ARCHIVE_EOF {
            return ARCHIVE_OK
        }

        if r != ARCHIVE_OK {
            return r
        }

        r = archive_write_data_block(aw, buf, size, offset)
        if r != ARCHIVE_OK {
            return r
        }
    }

    return 0
}
